{"version":3,"sources":["components/spinner/spinner.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/list-item/list-item.js","components/list/index.js","components/list/list.js","services/swapi-service.js","components/app/index.js","components/app/app.js","index.js"],"names":["Spinner","react_default","a","createElement","className","ItemAddForm","state","label","onLabelChange","e","_this","setState","target","value","onSubmit","preventDefault","props","item","console","log","id","this","maxId","label1","type","onChange","placeholder","Component","TodoListItem","_ref","onDelete","components_item_add_form","onClick","TodoList","items","elements","onItemAdded","map","itemProps","Object","objectWithoutProperties","key","list_item_list_item","assign","SwapiService","url","fetch","res","ok","Error","concat","status","json","getResource","App","swapiService","newItems","idx","findIndex","toConsumableArray","slice","_this2","getAllAuthor","then","peopleList","index","components_list","spinner_spinner","ReactDOM","render","components_app","document","getElementById"],"mappings":"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","file":"static/js/main.a698b723.chunk.js","sourcesContent":["import React from 'react';\n\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"lds-css\">\n      <div className=\"lds-double-ring\">\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import ItemAddForm from './item-add-form';\n\nexport default ItemAddForm;\n","import React, { Component } from 'react';\n\nimport './item-add-form.css';\n\nexport default class ItemAddForm extends Component {\n\n  state = {\n    label:  ''\n  };\n  \n  createItem(label) {\n    return {\n      id: ++this.maxId,\n      label\n    };\n  } \n  \n  onLabelChange = (e) => {\n    this.setState({\n      label: e.target.value\n    });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.item.label = this.state.label;\n    console.log('vvv2',this.props.item);\n  };\n\n  render() {\n    const {label1} = this.props;\n    return (\n      <form\n        className=\"bottom-panel d-flex\"\n        onSubmit={this.onSubmit}>\n\n        <input type=\"text\"\n               className=\"form-control new-todo-label\"\n               onChange={this.onLabelChange}\n               placeholder={label1}\n               value={this.state.label} />\n               <button type=\"submit\"\n              className=\"btn btn-outline-danger btn-sm float-right\"\n              >Save</button>\n\n\n               \n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport ItemAddForm from '../item-add-form';\nimport './list-item.css';\n\nconst TodoListItem = ({ label, onDelete, item, id }) => {\n\n  let classNames = 'todo-list-item';\n  \n  return (\n    <span className={classNames} >\n    <ItemAddForm label1 = {label}\n          item ={item}\n          id={id}\n           />\n      <span\n        className=\"todo-list-item-label\"\n     ></span>\n\n      <button type=\"button\"\n              className=\"btn btn-outline-danger btn-sm float-right\"\n              onClick={onDelete}>\n        <i className=\"fa fa-trash-o\"></i>\n      </button>\n    </span>\n  );\n};\n\nexport default TodoListItem;\n","import TodoList from './list';\n\nexport default TodoList;\n","import React from 'react';\n\nimport AuthorListItem from '../list-item/list-item';\n\nimport './list.css';\n\nconst AuthorList = ({ items, onDelete, onItemAdded }) => {\n  \n  const elements = items.map((item) => {\n   \n    const { id, ...itemProps } = item;\n    return (\n      <li key={id} className=\"list-group-item\">\n        <AuthorListItem\n          item = {item}\n          id={id}\n          { ...itemProps }\n          onDelete={ () => onDelete(id) }\n         />\n          </li>\n    );\n  });\n\n  return (<ul className=\"todo-list list-group\">{ elements }</ul>);\n};\n\nexport default AuthorList;\n","export default class SwapiService {\n\n  async getResource(url) {\n    const res = await fetch(` http://my-json-server.typicode.com/mate-academy/literary-blog/authors`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}` +\n        `, received ${res.status}`)\n    }\n    return await res.json();\n  }\n\n  async getAllAuthor() {\n    const res = await this.getResource();\n    return res;\n  }\n }\n","import App from './app';\n\nexport default App;\n","import React, { Component } from 'react';\nimport Spinner from \"../spinner/spinner\";\nimport AuthorList from '../list';\nimport SwapiService from \"../../services/swapi-service\"; \nimport './app.css';\n\nexport default class App extends Component {\n  \n  swapiService = new SwapiService();\n\n  state = {\n    newItems: null\n  };\n\n  componentDidMount() {\n    this.swapiService\n      .getAllAuthor()\n      .then((peopleList) => {\n        let newItems = peopleList.map(function(item, index){\n          return { 'id':index, 'label':item, }});\n        this.setState({\n          newItems\n        });\n      });\n  } \n  \n  maxId = 100;\n\n  onDelete = (id) => {\n    \n    this.setState((state) => {\n      const idx = state.newItems.findIndex((item) => item.id === id);\n      const newItems = [\n        ...state.newItems.slice(0, idx),\n        ...state.newItems.slice(idx + 1)\n      ];\n      return { newItems };\n    });\n  };\n\n  render() {\n    const { newItems} = this.state;\n    if (!newItems) {\n      return <Spinner />;\n    }\n     \n    return (\n      <div className=\"todo-app\"><h2>List of authors</h2>        \n        <AuthorList\n          items={ this.state.newItems }\n          onDelete={this.onDelete}\n          onItemAdded={this.onItemAdded} />\n\n      </div>\n    );\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />,\n  document.getElementById('root'));"],"sourceRoot":""}